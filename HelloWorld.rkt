#lang racket/base

คำนวณตามสมการ

1.สร้างฟังก์ชันในการคำนวณหาปริมาตรทรงกลม เมื่อระบุรัศมี
(define pi 3.141592653589793)
(define (sphere r)
    (* (/ 4 3) pi (expt r 3))
)

(sphere 5)
ผลที่ได้ 523.5983333333332

2. สร้างฟังก์ชันในการคำนวณหาพื้นที่สามเหลี่ยม เมื่อระบุความกว้างและความสูง
(define (triangle w h)
    (* 1/2 w h)
)

(triangle 20 4)
ผลที่ได้ 40

แบบมีเงื่อนไข

3. สร้างฟังก์ชันตัดเกรดโดยคะแนนน้อยกว่า 40 ได้ F ระหว่าง 40-79 ได้ P และ 80 ขึ้นไปได้ G
(define (grade score)
  (cond
    ((< score 40) "F")
    ((and (>= score 40) (< score 80)) "P")
    ((>= score 80) "G")
  )
)

(grade 50)
ผลที่ได้ P

4. สร้างฟังก์ชันหาเลขหลักสิบ (ค้นหาฟังก์ชันหารเอาเศษ และหารปัดเศษทิ้งใน reference manual)
(define (second num)
  (quotient (modulo num 100) 10)
)

(second 1234)
ผลที่ได้ 3

ใช้การเรียกซ้ำตัวเอง

5. สร้างฟังก์ชันคำนวณหาผลคูณของสมาชิกแต่ละตัวในเลขจำนวน เช่น 1234 จะได้ 1*2*3*4 = 24
(define (each num)
  (if (= num 0)
      1
      (* (modulo num 10) (each (quotient num 10)))
  )
)
          
(each 1234)
ผลที่ได้ 24

โจทย์เกี่ยวกับลิสต์ 
ค้นหาฟังก์ชันเกี่ยว lists ที่มีได้ใน reference manual

เรียกใช้ฟังก์ชันที่มีอยู่แล้ว

1. เรียกใช้ฟังก์ชันกลับลำดับสมาชิกในลิสต์ที่ให้
(reverse (list 1 2 3 4))
ผลที่ได้ '(4 3 2 1)

2. เรียกใช้ฟังก์ชันสลับลำดับของลิสต์ที่ให้
(require racket/list) ;
(define (permute-list lst)
  (permutations lst));

(permute-list '(1 2 3))
ผลที่ได้ '((1 2 3) (2 1 3) (1 3 2) (3 1 2) (2 3 1) (3 2 1))

สร้างฟังก์ชันใหม่จากฟังก์ชันที่มีอยู่แล้ว

3. สร้างฟังก์ชันในการคืนค่าสมาชิกตัวสุดท้ายของลิสต์ที่ให้
(car (cdr (cdr (cdr '(a b c d)))))
ผลที่ได้ d

4. สร้างฟังก์ชันในการลบสมาชิกตัวสุดท้ายของลิสต์ที่ให้
(reverse(cdr (reverse '(a b c d))))
ผลที่ได้ (a b c)
